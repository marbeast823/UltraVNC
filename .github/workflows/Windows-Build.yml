name: Build UltraVNC â€” Windows x64 Release

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CONFIGURATION: Release
  PLATFORM: x64

jobs:
  build-windows-x64:
    name: Build (windows-latest, x64, Release)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Download nuget.exe (if needed)
        # Use PowerShell to download nuget.exe into repo root so we can restore older-style solutions
        shell: pwsh
        run: |
          $nugetPath = Join-Path $env:GITHUB_WORKSPACE 'nuget.exe'
          if (-not (Test-Path $nugetPath)) {
              Write-Host "Downloading nuget.exe..."
              Invoke-WebRequest -Uri 'https://dist.nuget.org/win-x86-commandline/latest/nuget.exe' -OutFile $nugetPath
          } else {
              Write-Host "nuget.exe already present at $nugetPath"
          }

      - name: Find solution file
        id: find_sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter *.sln -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $sln) {
            Write-Error "No .sln file found in repository. Ensure your solution (.sln) is committed."
            exit 1
          }
          Write-Host "Found solution: $($sln.FullName)"
          # Set output for later steps
          echo "sln=$($sln.FullName)" >> $env:GITHUB_OUTPUT

      - name: Restore NuGet packages (if needed)
        shell: pwsh
        run: |
          $sln = '${{ steps.find_sln.outputs.sln }}'
          if (-not (Test-Path -Path (Join-Path $env:GITHUB_WORKSPACE 'nuget.exe'))) {
            Write-Host "nuget.exe not found; skipping nuget restore."
          } else {
            Write-Host "Running: nuget.exe restore `"$sln`""
            & $env:GITHUB_WORKSPACE\nuget.exe restore "$sln"
          }

      - name: Build solution with MSBuild
        shell: pwsh
        run: |
          $sln = '${{ steps.find_sln.outputs.sln }}'
          Write-Host "Building solution: $sln"
          # msbuild should be available in PATH after microsoft/setup-msbuild
          msbuild "$sln" /p:Configuration=${{ env.CONFIGURATION }} /p:Platform=${{ env.PLATFORM }} /m /t:Rebuild

      - name: Package build outputs (zip)
        id: package
        shell: pwsh
        run: |
          $ws = $env:GITHUB_WORKSPACE
          $outZip = Join-Path $ws 'artifacts' 'UltraVNC-x64-Release.zip'
          # Ensure artifacts directory exists
          New-Item -ItemType Directory -Path (Split-Path $outZip) -Force | Out-Null

          Write-Host "Searching for typical Release output directories (x64\\Release, Release, bin\\Release)..."
          $releaseDirs = Get-ChildItem -Path $ws -Recurse -Directory -ErrorAction SilentlyContinue |
                         Where-Object { $_.FullName -match '\\x64\\Release$' -or $_.FullName -match '\\Release$' -or $_.FullName -match '\\bin\\Release$' }

          $files = @()
          if ($releaseDirs -and $releaseDirs.Count -gt 0) {
            Write-Host "Found Release directories:"
            $releaseDirs | ForEach-Object { Write-Host " - $($_.FullName)" }
            foreach ($d in $releaseDirs) {
              $files += Get-ChildItem -Path $d.FullName -Recurse -File -ErrorAction SilentlyContinue
            }
          } else {
            Write-Host "No Release directories found; falling back to collecting common binary types (*.exe, *.dll, *.msi)"
            $files = Get-ChildItem -Path $ws -Recurse -Include *.exe,*.dll,*.msi -File -ErrorAction SilentlyContinue
          }

          if (-not $files -or $files.Count -eq 0) {
            Write-Error "No build artifacts found to package. Build may have failed or outputs are in a non-standard location."
            exit 1
          }

          Write-Host "Packaging $($files.Count) files into $outZip"
          # Compress-Archive accepts file paths; to avoid too long command lines, write file list to temp folder as wildcard grouping
          $tempDir = Join-Path $env:TEMP ('ultravnc-pack-' + [guid]::NewGuid().ToString())
          New-Item -ItemType Directory -Path $tempDir | Out-Null
          foreach ($f in $files) {
            $dest = Join-Path $tempDir (Split-Path $f.FullName -Leaf)
            Copy-Item -Path $f.FullName -Destination $dest -Force
          }

          if (Test-Path $outZip) { Remove-Item $outZip -Force }
          Compress-Archive -Path (Join-Path $tempDir '*') -DestinationPath $outZip -Force
          Remove-Item -Recurse -Force $tempDir

          Write-Host "Artifact packaged at: $outZip"
          echo "artifact=$outZip" >> $env:GITHUB_OUTPUT

      - name: Upload artifact (UltraVNC x64 Release)
        uses: actions/upload-artifact@v4
        with:
          name: UltraVNC-x64-Release
          path: ${{ steps.package.outputs.artifact }}
